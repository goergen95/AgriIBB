Q = (V*C1) / integrate(f(c2,c0), lower = 0,upper = 36)
Q = (V*C1) / integrate(f, lower = 0,upper = 36)
f = function(x){
x-124
}
Q = (V*C1) / integrate(f, lower = 0,upper = 36)
ctest
plot(ctest,type= "l")
f = function(x){
c2-c0
}
Q = m / integrate(f, lower = 0,upper = 36)
m = 30 #mg/l
Q = m / integrate(f, lower = 0,upper = 36)
integrate(f, lower = 0,upper = 36)
f = function(x){
ctest
}
Q = m / integrate(f, lower = 0,upper = 36)
Q = m / ctest
Q
c2
c0
ctest
Q = sum(m / ctest)
Q
ctest[12]=0
Q = sum(m/ctest)
Q
ctest = c2 - c0
ctest[12]=0
m/ctest
int = m/ctest
int[12]=0
sum(int)
m = 529 #mg/l
int = m/ctest
int[12]=0
sum(int)
sum(c2-c0)
int = sum(c2-c0)
Q = (V*Ci)/int
Ci = 30 #g/l
Q = (V*Ci)/int
Q
c2i = c(174,585,686,425,202,162,136,131,129,128,127,127,127,126,126,126,124)
int2 = sum(c2i-c0)
Q2 = (V*Ci)/int2
conc =function(x){
C = 0.0005*x-0.1413
return(C)
}
conc(c2)
conc(c2i)
tub = 0
inflow = 10 # in liters per minute
outflow = 0.5 * tub
for (i in 1:10){
tub = tub + inflow
outflow = 0.5*tub
tub = tub - outflow
print(paste0("The water in the tub after minute ",i," is ",tub))
}
f = function(x){-0.5x + 10x}
f = function(x){-0.5*x + 10*x}
integrate(f,lower = 0,upper = 10)
f = function(x){10*x-0.5x}
f = function(x){10*x-0.5*x}
integrate(f,lower = 0,upper = 10)
integrate(f,lower = 0,upper = 1)
integrate(f,lower = 0,upper = 10)
f
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
?ggplot
length(mpg$hwy)
unique(mpg$displ)
liters = unique(mpg$displ)
average = c()
for (i in liters){
m = mean(mpg$hwy[mpg$displ==i])
append(average,m)
}
for (i in 1:length(liters)){
average[i] = mean(mpg$hwy[mpg$displ==liters[i]])
}
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=average)
displAv = data.frame(displ=liters,hwy=average)
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=hwy))
mod = lm(hwy~displ, data=displAv)
mod
min(liters)
x = seq(0,7,0.5)
y = predict(mod,x)
f = function(x){-2.849*x+33.855}
y = lapply(x,f)
y
y = unlist(lapply(x,f))
y
x = seq(0,7,0.25)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.2)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.1)
x = seq(0,7,0.21)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.22)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.23)
x = seq(0,7,0.19)
x = seq(0,7,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,7,0.198)
x = seq(0,7,0.195)
x = seq(0,7,0.194)
x = seq(0,8,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,8,0.25)
x = seq(0,8,0.225)
x = seq(0,8,0.22)
x = seq(0,8,0.21)
x = seq(0,8,0.23)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
y
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
y = unlist(lapply(displAv$displ,f))
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
mod
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))+
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, size=cyl))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=cyl))
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=year, shape=fl))
devtools::install_github("rstudio/keras")
library(keras)
_install_keras()
?install_keras()
library(rgdal)
# script to achieve an automated stratified random sampling
library(rgdal)
library(gdalUtils)
library(rgeos)
library(mapview)
library(sp)
library(maptools)
fields = readOGR("F:/R/results/shapes/agri_area_single.shp")
fields$id = 1:length(fields)
provinces = readOGR("F:/R/results/shapes/adm_1_2_balchasch_alakol.shp")
provinces = provinces[is.na(provinces$HASC_1),]
provinces@data = provinces@data[,c(2,5,14)]
provinces@data$NAME_1 = as.character(provinces@data$NAME_1)
provinces@data$NAME_2 = as.character(provinces@data$NAME_2)
centroids = gCentroid(fields, byid = TRUE)
contained = gContains(provinces,centroids, byid = TRUE)
index = apply(contained,1,function(x){
return(which(x == TRUE))
})
index = as.vector(unlist(index))
provNames = provinces@data$NAME_2
fields$province = provNames[index]
fields$area = gArea(fields,byid = TRUE)
df = data.frame(prov = provNames,area=0, perc = 0,pixels=0)
for(province in provNames){
df$area[df$prov==province] = sum(fields$area[fields$province==province])
}
df$perc = df$area / sum(df$area)
df$pixels = round(2000 * df$perc)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 750)
mapview(buffer)
r = raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
r = raster::raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
fields$area = gArea(fields,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution)
mapview(buffer)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*6)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
touch = gIntersects(buffer)
touch = gIntersects(buffer, byid = TRUE)
touch
?gIntersects
notouch = gDisjoint(buffer, byid = TRUE)
notouch
rm(touch)
unique(touch)
unique(notouch)
summary(notouvh)
summary(notouch)
dim(notouch)
notuch[1,1]
notouch[1,1]
index = apply(notouch,1,function(x){
return(sum(x))
})
index
index = as.vector(unlist(index))
index
unique(index)
index = apply(notouch,1,function(x){
return(sum(x))
})
sum(notouch[1,])
sum(notouch[,1])
notouch[1,]
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
which(index==2047)
plot(randomPoints[c(33,34)])
plot(randomPoints[c(33,34),])
mapview(randomPoints[c(33,34),])
mapview(randomPoints[c(62,71),])
randomPoints
which(index==2047)
which(index==2047)[seq(1,which(index==2047),2)]
which(index==2047)[seq(1,length(which(index==2047)),2)]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints = randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
unique(index)
gDisjoint()
?gDisjoint()
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
index = which(index==2047
index
index = which(index==2047)
index
notouch[index,]
which(!notouch)
which(notouch)
which(!notouch)
dim(which(!notouch))
index = apply(notouch,1,function(x){
return(which(x == FALSE))
})
index
index = as.vector(unlist(index))
index
randomPoints
index = apply(notouch,1,function(x){
if (sum(x)==0)return(0)
if (sum(x)>0)return(which(x)==FALSE)
})
index
notouch = gIntersect(buffer, byid = TRUE)
touch = gIntersects(buffer, byid = TRUE)
sum(touch[1,])
sum(touch[2,])
sum(touch[3,])
as.vector(touch[3,])
as.vector(touch[1,])
sum(touch[2,])
sum(touch[4,])
sum(touch[5,])
sum(touch[500,])
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x)==TRUE)
})
index
index = as.vector(unlist(index))
index
which(index!=0)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
which(index!=0)
index
?spsample
df$pixels = round(2500 * df$perc)
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
touch = gIntersects(buffer, byid = TRUE)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
index
index = which(index!=0)
index
randomPoints = randomPoints[-index,]
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(tmp)))
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(randomPoints)))
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(random, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(randomPoints, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
df
write.csv(df,"B:/ibb/results/randomSample.csv")
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
install.packages("rater")
install.packages("raster")
library(raster)
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
?merge
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
?merge
t = merge(first2016,second2016)
t = mosaic(first2016,second2016)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
second2016
plot(second2016[1],type = "l")
plot(as.numeric(second2016[1]),type = "l")
setwd("B:/ibb/AgriIBB/.git/")
setwd("B:/ibb/AgriIBB/")
# script to analyse abandonment/fallow frequency
library(raster)
predfiles = list.files("../results/prediction/",pattern="activity",full.names=TRUE)
predfiles = list.files("../results/prediction/",pattern="activitiy",full.names=TRUE)
predRas = lapply(predfiles,raster)
predRas = lapply(predRas,fun=function(x){
x[x==2] = 0
})
predRas = lapply(predRas,fun=function(x){
x[x==2] = 0
}
})
predRas = lapply(predRas,fun=function(x){
x[x==2] = 0
})
maskActive = function(x){
x[x==2] = 0
}
predRas = lapply(predRas,fun=maskActive)
predRas = lapply(predRas,FUN=maskActive)
predRas[[1]]
predRas = lapply(predfiles,raster)
predRas[[1]]
predRas[[1]][predRas==2]
predRas[[1]][predRas=2]
maskActive = function(x){
x[x=2] = 0
}
predRas = lapply(predRas,FUN=maskActive)
predRas
maskActive = function(x){
x[x=2] = 0
}
predRas = lapply(predRas,FUN=maskActive)
maskActive = function(x){
x[[]][x=2] = 0
}
predRas = lapply(predRas,FUN=maskActive)
maskActive = function(x){
x[[1]][x=2] = 0
}
predRas = lapply(predRas,FUN=maskActive)
?reclassify
?matrix
matrix(c(1,2,1,2,3,0),byrow=TRUE)
matrix(c(1,2,1,2,3,0),byrow=F)
matrix(c(1,2,1,2,3,0)nrow=2,byrow=F)
matrix(c(1,2,1,2,3,0),nrow=2,byrow=T)
predRas = lapply(predRas,raster::reclassify,args=list(rcl=matrix(c(1,2,1,2,3,0),nrow=2,byrow=T)))
?lapply
predRas = do.call("raster::reclassify",predRas,args=list(rcl=matrix(c(1,2,1,2,3,0),nrow=2,byrow=T)))
maskActive = function(x){
x = raster::reclassify(x,rcl=matrix(c(1,2,1,2,3,0),nrow=2,byrow=T))
}
ffrequency = lapply(predRas,maskActive)
maskActive = function(x){
x = raster::reclassify(x,rcl=matrix(c(1,2,1,2,3,0),nrow=2,byrow=T))
return(x)
}
ffrequency = lapply(predRas,maskActive)
ffrequency = Reduce("+",predRas)
ffrequency
plot(ffrequency)
plot(predRas[[1]])
predRas[[1]]
y = maskActive(predRas[[1]])
plot(y)
maskActive = function(x){
x[x==2]=0
return(x)
}
y = maskActive(predRas[[1]])
plot(y)
ffrequency = lapply(predRas,maskActive)
ffrequency = Reduce("+",predRas)
ffrequency
predRas
predfiles
predRas = lapply(predfiles,raster)
predRas
maskActive = function(x){
x[x==2]=0 # value 2: active, value 1: inactive
return(x)
}
ffrequency = lapply(predRas,maskActive)
ffrequency
ffrequency2 = Reduce("+",predRas)
ffrequency2
ffrequency2 = Reduce("+",predRas,accumulate=TRUE)
ffrequency2
unlist(ffrequency)
ffrequency2 = sum(unlist(ffrequency))
ffrequency2 = lapply(ffrequency,sum)
warnings()
ffrequency2 = do.call("sum",predRas)
stack(ffrequency)
ffrequency2 = sum(stack(ffrequency))
ffrequency2
ffrequency=ffrequency2
rm(ffrequency2)
mapview::mapview(ffrequency)
writeRaster(ffrequency,filename="../results/prediction/ffrequency.tif")
afrequency = predRas[[1]]
afrequency[] = 14
afrequency = afrequency-ffrequency
writeRaster(afrequency,filename="../results/prediction/afrequency.tif")
