x = seq(0,7,0.22)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.23)
x = seq(0,7,0.19)
x = seq(0,7,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,7,0.198)
x = seq(0,7,0.195)
x = seq(0,7,0.194)
x = seq(0,8,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,8,0.25)
x = seq(0,8,0.225)
x = seq(0,8,0.22)
x = seq(0,8,0.21)
x = seq(0,8,0.23)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
y
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
y = unlist(lapply(displAv$displ,f))
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
mod
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))+
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, size=cyl))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=cyl))
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=year, shape=fl))
devtools::install_github("rstudio/keras")
library(keras)
_install_keras()
?install_keras()
library(rgdal)
# script to achieve an automated stratified random sampling
library(rgdal)
library(gdalUtils)
library(rgeos)
library(mapview)
library(sp)
library(maptools)
fields = readOGR("F:/R/results/shapes/agri_area_single.shp")
fields$id = 1:length(fields)
provinces = readOGR("F:/R/results/shapes/adm_1_2_balchasch_alakol.shp")
provinces = provinces[is.na(provinces$HASC_1),]
provinces@data = provinces@data[,c(2,5,14)]
provinces@data$NAME_1 = as.character(provinces@data$NAME_1)
provinces@data$NAME_2 = as.character(provinces@data$NAME_2)
centroids = gCentroid(fields, byid = TRUE)
contained = gContains(provinces,centroids, byid = TRUE)
index = apply(contained,1,function(x){
return(which(x == TRUE))
})
index = as.vector(unlist(index))
provNames = provinces@data$NAME_2
fields$province = provNames[index]
fields$area = gArea(fields,byid = TRUE)
df = data.frame(prov = provNames,area=0, perc = 0,pixels=0)
for(province in provNames){
df$area[df$prov==province] = sum(fields$area[fields$province==province])
}
df$perc = df$area / sum(df$area)
df$pixels = round(2000 * df$perc)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 750)
mapview(buffer)
r = raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
r = raster::raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
fields$area = gArea(fields,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution)
mapview(buffer)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*6)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
touch = gIntersects(buffer)
touch = gIntersects(buffer, byid = TRUE)
touch
?gIntersects
notouch = gDisjoint(buffer, byid = TRUE)
notouch
rm(touch)
unique(touch)
unique(notouch)
summary(notouvh)
summary(notouch)
dim(notouch)
notuch[1,1]
notouch[1,1]
index = apply(notouch,1,function(x){
return(sum(x))
})
index
index = as.vector(unlist(index))
index
unique(index)
index = apply(notouch,1,function(x){
return(sum(x))
})
sum(notouch[1,])
sum(notouch[,1])
notouch[1,]
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
which(index==2047)
plot(randomPoints[c(33,34)])
plot(randomPoints[c(33,34),])
mapview(randomPoints[c(33,34),])
mapview(randomPoints[c(62,71),])
randomPoints
which(index==2047)
which(index==2047)[seq(1,which(index==2047),2)]
which(index==2047)[seq(1,length(which(index==2047)),2)]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints = randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
unique(index)
gDisjoint()
?gDisjoint()
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
index = which(index==2047
index
index = which(index==2047)
index
notouch[index,]
which(!notouch)
which(notouch)
which(!notouch)
dim(which(!notouch))
index = apply(notouch,1,function(x){
return(which(x == FALSE))
})
index
index = as.vector(unlist(index))
index
randomPoints
index = apply(notouch,1,function(x){
if (sum(x)==0)return(0)
if (sum(x)>0)return(which(x)==FALSE)
})
index
notouch = gIntersect(buffer, byid = TRUE)
touch = gIntersects(buffer, byid = TRUE)
sum(touch[1,])
sum(touch[2,])
sum(touch[3,])
as.vector(touch[3,])
as.vector(touch[1,])
sum(touch[2,])
sum(touch[4,])
sum(touch[5,])
sum(touch[500,])
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x)==TRUE)
})
index
index = as.vector(unlist(index))
index
which(index!=0)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
which(index!=0)
index
?spsample
df$pixels = round(2500 * df$perc)
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
touch = gIntersects(buffer, byid = TRUE)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
index
index = which(index!=0)
index
randomPoints = randomPoints[-index,]
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(tmp)))
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(randomPoints)))
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(random, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(randomPoints, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
df
write.csv(df,"B:/ibb/results/randomSample.csv")
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
install.packages("rater")
install.packages("raster")
library(raster)
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
?merge
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
?merge
t = merge(first2016,second2016)
t = mosaic(first2016,second2016)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
second2016
plot(second2016[1],type = "l")
plot(as.numeric(second2016[1]),type = "l")
library(raster)
ls = list.files("B:/ibb/results/savG/", full.names = TRUE)
brs = ls[-grep("B3",ls)]
brs
grep("B3",ls)
ls
brs = ls[-grep("B23",ls)]
layers = ls[grep("B23",ls)]
b = brick(brs[1])
b[1]
brs = lapply(brs,brick)
brs
layers = lapply(layers,raster)
?apply
fun = function(br,ly){
br[[23]] = ly
return(br)
}
exchange = mapply(fun, X=brs, Y=ly)
exchange = mapply(fun, X=brs, Y=layers)
br[[]]
brs[[]]
brs[[23]]
brs[[1]]
brs[[1]][[23]]
brs[[1]][[23]] =layers[[1]]
brs = lapply(brs,brick)
ls = list.files("B:/ibb/results/savG/", full.names = TRUE)
brs = ls[-grep("B23",ls)]
layers = ls[grep("B23",ls)]
brs = lapply(brs,brick)
layers = lapply(layers,raster)
brs[[1]]
brs[[1]][23]
brs[[1]][[23]]
plot(brs[[1]][[23]])
plot(layers[[1]])
layers[[1]]
layers[[2]]
source(layers[[2]])
years = 2003:2016
for ( i in 1:length(brs)){
brs[[i]][[23]] = layers[[1]]
writeRaster(brs[[i]], filename = paste0("B:/ibb/results/savG/savG_T_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
print("Successfully written raster for the year ",years[i],".")
}
gc()
removeTmpFiles(h=0)
beginCluster(7)
for ( i in 1:length(brs)){
brs[[i]][[23]] = layers[[1]]
writeRaster(brs[[i]], filename = paste0("B:/ibb/results/savG/savG_T_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
print("Successfully written raster for the year ",years[i],".")
}
band = 1:22
paste("B",band,sep="")
DOY = seq(1,353,14)
OY
DOY
DOY = seq(1,353,16)
DOY
DOY[1:8] = c("001","017","033","049","065","081","097")
DOY[1:7] = c("001","017","033","049","065","081","097")
DOY
DOY = as.character(seq(1,337,16))
DOY[1:7] = c("001","017","033","049","065","081","097")
DOY
beginCluster(7)
for ( i in 1:length(brs)){
tmp = brs[[i]]
for(j in bands){
writeRaster(tmp, filename = paste0("B:/ibb/results/savG/layered/savG_",paste("B",band[j],sep=""),"_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
}
print("Successfully written raster for the year ",years[i],".")
}
endCluster()
beginCluster(7)
for ( i in 1:length(brs)){
tmp = brs[[i]]
for(j in bands){
writeRaster(tmp, filename = paste0("B:/ibb/results/savG/layered/savG_",paste("B",DOY[j],sep=""),"_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
}
print("Successfully written raster for the year ",years[i],".")
}
endCluster()
beginCluster(7)
for ( i in 1:length(brs)){
tmp = brs[[i]]
for(j in 1:length(DOY)){
writeRaster(tmp[[j]], filename = paste0("B:/ibb/results/savG/layered/savG_",paste("B",DOY[j],sep=""),"_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
}
print("Successfully written raster for the year ",years[i],".")
}
endCluster()
beginCluster(7)
for ( i in 1:length(brs)){
tmp = brs[[i]]
for(j in 1:length(DOY)){
writeRaster(tmp[[j]], filename = paste0("B:/ibb/results/savG/layered/savG_",paste("DOY",DOY[j],sep=""),"_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
}
print("Successfully written raster for the year ",years[i],".")
}
endCluster()
years = 2004:2016
beginCluster(7)
for ( i in 1:length(brs)){
tmp = brs[[i]]
for(j in 1:length(DOY)){
writeRaster(tmp[[j]], filename = paste0("B:/ibb/results/savG/layered/savG_",paste("DOY",DOY[j],sep=""),"_",years[i],".tif"),options="COMPRESS=LZW",driver="GTiff")
}
print(paste0("Successfully written raster for the year ",years[i],"."))
}
endCluster()
ls = list.files("B:/ibb/results/savG/layered/", full.names = TRUE)
grep(2005,ls)
ls[grep(2005,ls))
ls[grep(2005,ls)]
library(stringr)
str_sub(ls[grep(2005,ls)],1,25)
str_sub(ls[grep(2005,ls)],1,40)
paste0(str_sub(ls[grep(2005,ls)],1,40),"2004.tif")
file.rename(ls[grep(2005,ls)],paste0(str_sub(ls[grep(2005,ls)],1,40),"2004.tif"))
file.rename(ls[grep(2006,ls)],paste0(str_sub(ls[grep(2006,ls)],1,40),"2005.tif"))
file.rename(ls[grep(2007,ls)],paste0(str_sub(ls[grep(2007,ls)],1,40),"2006.tif"))
file.rename(ls[grep(2008,ls)],paste0(str_sub(ls[grep(2008,ls)],1,40),"2007.tif"))
file.rename(ls[grep(2009,ls)],paste0(str_sub(ls[grep(2009,ls)],1,40),"2008.tif"))
file.rename(ls[grep(2010,ls)],paste0(str_sub(ls[grep(2010,ls)],1,40),"2009.tif"))
file.rename(ls[grep(2011,ls)],paste0(str_sub(ls[grep(2011,ls)],1,40),"2010.tif"))
file.rename(ls[grep(2012,ls)],paste0(str_sub(ls[grep(2012,ls)],1,40),"2011.tif"))
file.rename(ls[grep(2013,ls)],paste0(str_sub(ls[grep(2013,ls)],1,40),"2012.tif"))
file.rename(ls[grep(2014,ls)],paste0(str_sub(ls[grep(2014,ls)],1,40),"2013.tif"))
file.rename(ls[grep(2015,ls)],paste0(str_sub(ls[grep(2015,ls)],1,40),"2014.tif"))
file.rename(ls[grep(2016,ls)],paste0(str_sub(ls[grep(2016,ls)],1,40),"2015.tif"))
file.rename(ls[grep("NA",ls)],paste0(str_sub(ls[grep("NA",ls)],1,40),"2016.tif"))
DOY
getwd()
setwd("B:/ibb/AgriIBB/")
VIs = list.files("../results/savG/layered/", pattern ="savG", full.names = TRUE)
VIs
year = 2003
vi = lapply(VIs[grep(year,VIs)],raster)
vi
vi = do.call(stack,vi)
vi
DOY = seq(1,353,16)
DOY = as.character(seq(1,353,16))
library(stringr)
VIs
DOY = unqique(str_sub(VIs,-12,10)
)
DOY = unique(str_sub(VIs,-12,10))
DOY
DOY = unique(str_sub(VIs,-12,-10))
DOY
vi
names(vi)
vi = lapply(VIs[grep(year,VIs)][7:18],raster)
vi = do.call(stack,vi)
names(vi)
MEAN = mean(vi)
MAX = max(vi)
MIN = min(vi)
AMP = MAX - MIN
# prepare fast SD calculation
sq = (vi - MEAN)^2
# prepare fast SD calculation
sq = (vi - MEAN)
sq = sum(sq^2)
sq = sq * sq
sq
sq = sum(sq)
SD = sqrt(sq/nlayers(vi))
plot(SD)
?cellStats
d = cellStats(vi, stat = "sd")
# calculate 25Q and 75Q
Qs = calc(vi,fun=quantile,args=list(probs=c(0.25,0.75),type=7))# with: m = 1-p. p[k] = (k - 1) / (n - 1).
fields
library(rgdal)
fields = readOGR("../results/shapes/fields.shp")
t = crop(vi,fields[5,])
plot(t)
# calculate 25Q and 75Q
Qs = calc(t,fun=function(x) {quantile(x,probs=c(.25,.75),type=7)})# with: m = 1-p. p[k] = (k - 1) / (n - 1).
Qs
t
# calculate integral of NDVI curve over the year
AREA = sum(t)
plot(AREA
)
# calculate integral of NDVI curve over the year
AREA = sum(vi)
plot(AREA)
AREA
sum(is.na(valuesAREA))
sum(is.na(values(AREA)))
# calculate integral of NDVI curve over the year
AREA = sum(vi, na.rm = TRUE)
sum(is.na(valuesAREA))
sum(is.na(values(AREA))
)
plot(AREA)
vi
plot(vi[[5]])
plot(vi[[6]])
which(values(vi[[6]])==-32000)
vi[[1]]
vi[[2]]
values(max(vi[[2]]))
max(values(vi[[2]]))
10374*.0001
which(values(vi[[2]]) ==max(values(vi[[2]])))
plot(as.numeric(vi[38747192]))
plot(as.numeric(vi[38747192]),type ="l")
# calculate 25Q and 75Q
Qs = calc(vi,fun=function(x) {quantile(x,probs=c(.25,.75),type=7)})# with: m = 1-p. p[k] = (k - 1) / (n - 1).
# calculation of SD
beginCluster(cores)
cores = 7
# calculation of SD
beginCluster(cores)
Qs = calc(vi,fun=function(x) {quantile(x,probs=c(.25,.75),type=7)})# with: m = 1-p. p[k] = (k - 1) / (n - 1).
Q
DOY
vi
