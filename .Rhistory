content = gContains(regions,points,byid=TRUE)
index = as.numeric(apply(content,1, function(x) which(x==TRUE)))
points$region = regions$regions[index]
for (region in unique(points$region)){
nActive = sum(points$active[points$region==region]==1)
nInactive = sum(points$active[points$region==region]==0)
regions$nActive[regions$regions==region] = nActive
regions$nInactive[regions$regions==region] = nInactive
}
# writting file to disk
writeOGR(regions, dsn="../results/shapes/regions.shp", layer="regions", overwrite_layer=T, driver="ESRI Shapefile")
tmp = as.vector(na.omit(r[regionRas==regions$ID[regions$regions==region]]))
regionRas
regions$ID[regions$regions==region]
regions$ID
# script to extract yearly agricultural information on region level
# 1 MODIS pixel is apprx. 250 x 250 m = 62.500m, so 6.25 acres per pixel
library(raster)
library(rgdal)
library(rgeos)
cores=7
# read in all files needed for the analysis
regions = readOGR("../data/shapes/regions.shp")
names(regions)[which(names(regions) == "NAME_2")] = "regions"
regionNames = unique(regions@data$regions)
fields = readOGR("../results/shapes/fields.shp")
predfiles = list.files("../results/prediction/", pattern = "activitiy", full.names = T)
abandMap = raster("../results/prediction/abandonmentMap.tif")
points = readOGR("../results/shapes/random_points.shp")
years = 2003:2016
# create an index of the names of regions which do not have any agricultural areas
# this saves a lot of unecessary comuputation time when pixel values are extracted
namesEmpty = regions$regions[regions$cropAre==0]
if (file.exists("../results/prediction/regionRas.tif")){
print("Using existing region raster. Make sure to delete regionRas.tif for new calculation.")
regionRas = raster("../results/prediction/regionRas.tif")
}else{
r = raster(predfiles[1])
r[] = NA
regions$ID = 1:length(regions)
beginCluster(cores)
regionRas = rasterize(regions,r, regions$ID)
writeRaster(regionRas,filename="../results/prediction/regionRas.tif", overwrite=T)
writeOGR(regions,dsn="../results/shapes/regions.shp",driver="ESRI Shapefile",layer="regions",overwrite_layer=TRUE)
}
# initiate empty dataframes for acres of active and inactive areas for all regions and all years
dfActive = data.frame(regions=regionNames,
active_2003=rep(0,35),
active_2004=rep(0,35),
active_2005=rep(0,35),
active_2006=rep(0,35),
active_2007=rep(0,35),
active_2008=rep(0,35),
active_2009=rep(0,35),
active_2010=rep(0,35),
active_2011=rep(0,35),
active_2012=rep(0,35),
active_2013=rep(0,35),
active_2014=rep(0,35),
active_2015=rep(0,35),
active_2016=rep(0,35))
dfInactive = data.frame(regions=regionNames,
inactive_2003=rep(0,35),
inactive_2004=rep(0,35),
inactive_2005=rep(0,35),
inactive_2006=rep(0,35),
inactive_2007=rep(0,35),
inactive_2008=rep(0,35),
inactive_2009=rep(0,35),
inactive_2010=rep(0,35),
inactive_2011=rep(0,35),
inactive_2012=rep(0,35),
inactive_2013=rep(0,35),
inactive_2014=rep(0,35),
inactive_2015=rep(0,35),
inactive_2016=rep(0,35))
# applying a nested-for-loop which iterates through the years and regions
# pixel numbers for each regions are extracted, transformed to acrage
# and writes the data into the corresponding cell of the dataframes created before
regVals = as.vector(na.omit(unique(values(regionRas))))
for (year in years){
r = raster(predfiles[grep(year,predfiles)])
for (region in regionNames){
if(region %in% namesEmpty) next
print(region)
tmp = as.vector(na.omit(r[regionRas==regions$ID[regions$regions==region]]))
active = sum(tmp==2) * 6.25
inactive = sum(tmp==1) * 6.25
dfActive[which(dfActive$regions==region),paste0("active_",year)] = active
dfInactive[which(dfInactive$regions==region),paste0("inactive_",year)] = inactive
}
print(paste0("Done with year ",year))
}
# based on the names of the regions, the results are merged with the region shapefile
regions= sp::merge(regions,dfActive)
regions= sp::merge(regions,dfInactive)
# extract abandonment data
abadData = data.frame(regions=regions$regions,abandoned=rep(0,35),recAbd=rep(0,35),recRecult=rep(0,35),cropland=rep(0,35))
for (region in regionNames){
if(region %in% namesEmpty) next
print(region)
tmp = as.vector(na.omit(abandMap[regionRas==regions$ID[regions$NAME_2==region]]))
aband = sum(tmp==1) * 6.25
recAband = sum(tmp==2) * 6.25
recRecu = sum(tmp==3) * 6.25
cropLand = sum(tmp==4) * 6.25
abadData$abandoned[which(abadData$region==region)] = aband
abadData$recAbd[which(abadData$region==region)] = recAband
abadData$recRecult[which(abadData$region==region)] = recRecu
abadData$cropland[which(abadData$region==region)] = cropLand
}
regions= sp::merge(regions,abadData)
content = gContains(regions,points,byid=TRUE)
index = as.numeric(apply(content,1, function(x) which(x==TRUE)))
points$region = regions$regions[index]
for (region in unique(points$region)){
nActive = sum(points$active[points$region==region]==1)
nInactive = sum(points$active[points$region==region]==0)
regions$nActive[regions$regions==region] = nActive
regions$nInactive[regions$regions==region] = nInactive
}
# writting file to disk
writeOGR(regions, dsn="../results/shapes/regions.shp", layer="regions", overwrite_layer=T, driver="ESRI Shapefile")
regions@data
abadData
dfActive
abadData
abandMap
print(region)
tmp
region
tmp = as.vector(na.omit(abandMap[regionRas==regions$ID[regions$NAME_2==region]]))
regionNames
region = regionNames[33]
tmp = as.vector(na.omit(abandMap[regionRas==regions$ID[regions$NAME_2==region]]))
regionRas==regions$ID[regions$NAME_2==region]
tmp = as.vector(na.omit(abandMap[regionRas==regions$ID[regions$regions==region]]))
# extract abandonment data
abadData = data.frame(regions=regions$regions,abandoned=rep(0,35),recAbd=rep(0,35),recRecult=rep(0,35),cropland=rep(0,35))
for (region in regionNames){
if(region %in% namesEmpty) next
print(region)
tmp = as.vector(na.omit(abandMap[regionRas==regions$ID[regions$regions==region]]))
aband = sum(tmp==1) * 6.25
recAband = sum(tmp==2) * 6.25
recRecu = sum(tmp==3) * 6.25
cropLand = sum(tmp==4) * 6.25
abadData$abandoned[which(abadData$region==region)] = aband
abadData$recAbd[which(abadData$region==region)] = recAband
abadData$recRecult[which(abadData$region==region)] = recRecu
abadData$cropland[which(abadData$region==region)] = cropLand
}
namesEmpty
# create an index of the names of regions which do not have any agricultural areas
# this saves a lot of unecessary comuputation time when pixel values are extracted
namesEmpty = regions$regions[regions$cropAre==0]
namesEmpty
regions$cropAre
# This script retrives temperature and percipitation values for the regions in the IBB
# Climatic data is based on gridded estimates of CRU TS 4.03
library(raster)
library(rgdal)
library(rgeos)
# reading needed files
regions = readOGR("../data/shapes/regions.shp")
prec = stack(list.files("../results/climate/", pattern="prec", full.names=TRUE))
temp = stack(list.files("../results/climate/", pattern="tmp", full.names=TRUE))
fields = readOGR("../data/shapes/fields.shp")
watershed = readOGR("../data/shapes/watershed_IBB.shp")
years=2003:2016
# for the calculation of the areas, the shapefile is transformed to UTM Zone 44N
# the majority of the IBB with agricultural areas lies within that zone
# later the shapefile is re-projected to WGS84
orgCRS = crs(regions)
utmCRS = "+proj=utm +zone=44 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
regions = spTransform(regions,utmCRS)
regions$area = gArea(regions,byid = TRUE) / 1e+6 # units in km2
regions= spTransform(regions,orgCRS)
fields = spTransform(fields,utmCRS)
crpArea = gArea(fields,byid=TRUE) / 1e+6
provinces = unique(fields$province)
for (prov in provinces){
regions$cropArea[regions$NAME_2==prov] = sum(crpArea[fields$province==prov],na.rm=TRUE)
}
regions$cropArea[is.na(regions$cropArea)] = 0
#initiating columns in the dataframe of regions to write precipitation and temperature data into
regions@data[,paste("temp",years,sep="")] = NA
regions@data[,paste("prec",years,sep="")] = NA
# for-loop iterating hrough the regions to retireve mean temperature and percipitation values of the pixels falling into the region
for (i in 1:length(regions)){
t = colMeans(extract(temp,regions[i,])[[1]])
p = colMeans(extract(prec,regions[i,])[[1]])
regions@data[i,paste("temp",years,sep="")] = t
regions@data[i,paste("prec",years,sep="")] = p
}
# writing file to disk
writeOGR(regions,dsn="../results/shapes/regions.shp",overwrite_layer=TRUE,driver="ESRI Shapefile",layer="regions")
regions = readOGR("../results/shapes/regions.shp")
names(regions)[which(names(regions) == "NAME_2")] = "regions"
# create an index of the names of regions which do not have any agricultural areas
# this saves a lot of unecessary comuputation time when pixel values are extracted
namesEmpty = regions$regions[regions$cropAre==0]
namesEmpty
regions$cropAre
# create an index of the names of regions which do not have any agricultural areas
# this saves a lot of unecessary comuputation time when pixel values are extracted
namesEmpty = regions$regions[regions$cropArea==0]
namesEmpty
dfInactive
# based on the names of the regions, the results are merged with the region shapefile
regions= sp::merge(regions,dfActive)
regions= sp::merge(regions,dfInactive)
regions@data
abadData
regions= sp::merge(regions,abadData)
regions
for (region in unique(points$region)){
nActive = sum(points$active[points$region==region]==1)
nInactive = sum(points$active[points$region==region]==0)
regions$nActive[regions$regions==region] = nActive
regions$nInactive[regions$regions==region] = nInactive
}
# writting file to disk
writeOGR(regions, dsn="../results/shapes/regions.shp", layer="regions", overwrite_layer=T, driver="ESRI Shapefile")
# this scripts creates plots and calculates statistics for the analysis of
# land use activity in the IBB
library(raster)
library(rgdal)
library(ggplot2)
# read in needed files
regions = readOGR("../results/shapes/regions.shp")
years=2003:2016
tmpNames = paste("tmp",years,sep="")
prcNames = paste("prc",years,sep="")
activeNames = paste("ac_",years,sep="")
inactiveNames=paste("in_",years,sep="")
fields = readOGR("../results/shapes/fields.shp")
namesEmpty = regions$regions[regions$cropAre==0]
regionNames = unique(regions@data$regions)
resultsPREC = data.frame(region=regions@data$regions,variable=rep("prec",35),coef=rep(0,35),rsquared=rep(0,35),pvalue=rep(0,35))
for (region in regionNames){
if(region %in% namesEmpty) next
print(region)
mod = lm(as.numeric(regions@data[regions$regions==region,activeNames]) ~ as.numeric(regions@data[regions$regions==region,prcNames]))
s = summary(mod)
coef = s$coefficients[2,1]
rsquared = round(s$r.squared,3)
pvalue = s$coefficients[2,4]
resultsPREC[resultsPREC$region==region,3:5] = c(coef,rsquared,pvalue)
}
resultsPREC = na.omit(resultsPREC)
resultsPREC = resultsPREC[-which(resultsTMP$coef==0),]
resultsTMP = data.frame(region=regions@data$regions,variable=rep("temp",35),coef=rep(0,35),rsquared=rep(0,35),pvalue=rep(0,35))
for (region in regionNames){
if(region %in% namesEmpty) next
print(region)
mod = lm(as.numeric(regions@data[regions$regions==region,activeNames]) ~ as.numeric(regions@data[regions$regions==region,tmpNames]))
s = summary(mod)
coef = s$coefficients[2,1]
rsquared = round(s$r.squared,3)
pvalue = s$coefficients[2,4]
resultsTMP[resultsTMP$region==region,3:5] = c(coef,rsquared,pvalue)
}
resultsTMP = na.omit(resultsTMP)
resultTMP = resultsTMP[-which(resultsTMP$coef==0),]
# large scale regression analysis
ALL = colSums(regions@data[,5:63],na.rm=TRUE)
KAZ = colSums(regions@data[regions$ISO=="KAZ",5:63],na.rm = T)
CHN = colSums(regions@data[regions$ISO=="CHN",5:63],na.rm = T)
global = data.frame(region=c("all","all","KAZ","CHN","KAZ","CHN"),variable=c("prec","temp","prec","prec","temp","temp"),coef=rep(0,6),rsquared=rep(0,6),pvalue=rep(0,6))
mod = lm(as.numeric(ALL[activeNames]) ~ as.numeric(ALL[prcNames]))
s = summary(mod)
global$coef[1] = s$coefficients[2,1]
global$rsquared[1]= round(s$r.squared,3)
global$pvalue[1]= s$coefficients[2,4]
mod = lm(as.numeric(ALL[activeNames]) ~ as.numeric(ALL[tmpNames]))
s = summary(mod)
global$coef[2] = s$coefficients[2,1]
global$rsquared[2]= round(s$r.squared,3)
global$pvalue[2]= s$coefficients[2,4]
mod = lm(as.numeric(KAZ[activeNames]) ~ as.numeric(KAZ[prcNames]))
s = summary(mod)
global$coef[3] = s$coefficients[2,1]
global$rsquared[3]= round(s$r.squared,3)
global$pvalue[3]= s$coefficients[2,4]
mod = lm(as.numeric(CHN[activeNames]) ~ as.numeric(CHN[prcNames]))
s = summary(mod)
global$coef[4] = s$coefficients[2,1]
global$rsquared[4]= round(s$r.squared,3)
global$pvalue[4]= s$coefficients[2,4]
mod = lm(as.numeric(KAZ[activeNames]) ~ as.numeric(KAZ[tmpNames]))
s = summary(mod)
global$coef[5] = s$coefficients[2,1]
global$rsquared[5]= round(s$r.squared,3)
global$pvalue[5]= s$coefficients[2,4]
mod = lm(as.numeric(CHN[activeNames]) ~ as.numeric(CHN[tmpNames]))
s = summary(mod)
global$coef[6] = s$coefficients[2,1]
global$rsquared[6]= round(s$r.squared,3)
global$pvalue[6]= s$coefficients[2,4]
results = rbind(global,resultsPREC,resultTMP)
write.csv(results,file="../results/regression/stats_results.csv")
write.csv(results,file="../results/regression/stats_results.csv")
names(regions)
regions$ID
regions$ID = 1:length(regions)
areaInfo = regions@data[,c("regions","ISO","ID","area","cropAre","nActive","nInactv","abandnd","recAbd","recRclt","croplnd")]
areaInfo
areaInfo = areaInfo[-which(areaInfo$cropAre==0)]
areaInfo
areaInfo = regions@data[,c("regions","ISO","ID","area","cropAre","nActive","nInactv","abandnd","recAbd","recRclt","croplnd")]
areaInfo = areaInfo[-which(areaInfo$cropAre==0),]
areaInfo
write.csv(areaInfo,"../results/regionAreas.csv")
results
results = results[-which(results$coef==0),]
results
write.csv(results,file="../results/regression/stats_results.csv")
regions@data[regions$regions==region,activeNames])
as.numeric(regions@data[regions$regions==region,activeNames])
region
library(rgdal)
library(ggplot2)
regions = readOGR("../results/shapes/regions.shp")
points = readOGR("../results/shapes/random_points.shp")
chn = colSums(regions@data[regions$ISO=="CHN",34:47])
kaz = colSums(regions@data[regions$ISO=="KAZ",34:47])
data = as.data.frame(t(rbind(chn,kaz)))
data$errorCplus = data$chn + 146925
data$errorCminus = data$chn - 146925
data$dates = 2003:2016
active = ggplot(data=data)+
geom_line(aes(x=dates, y=chn/1000), color="red",size=1.4)+
geom_line(aes(x=dates, y=kaz/1000), color="blue",size=1.4)+
geom_errorbar(aes(x=dates,ymin=(chn-146925)/1000, ymax=(chn+146925)/1000), width=.2, color="red")+
geom_errorbar(aes(x=dates,ymin=(kaz-146925)/1000, ymax=(kaz+146925)/1000), width=.2, color="blue")+
labs(y="active area (in 1000 acres)",
x="year")+
theme_minimal(base_size = 18)
active
active = colMeans(points@data[points$active==1,4:26])
inactive = colMeans(points@data[points$active==0,4:26])
NDVI = stack(list.files("../results/savG/layered/",pattern="2016"))
NDVI = stack(list.files("../results/savG/layered/",pattern="2016",full.names = T))
NDVI
map2016 = raster("../results/prediction/activitiy_2016.tif")
active = map2016
active
active[active==1] = NA
inactive = map2016
inactive[inactive==2] = NA
NDVI[active]
activeNDVI = NDVI[active]
activeNDVI[1,]
activeNDVI[2,]
inactive[!is.na(inactive)] = 1
inactiveNDVI = NDVI[inactive]
activeMeans = colMeans(points@data[points$active==1,4:26])
inactiveMeans = colMeans(points@data[points$active==0,4:26])
activeMeans
inactiveMeans
plot(inactiveMeans,type="l")
plot(activeMeans,type="l")
plot(inactiveMeans,type="l")
data =  as.data.frame(t(rbind(activeMeans,inactiveMeans)))
data$SDactive = as.vector(apply(activeNDVI,2,sd,na.rm=TRUE))
data$SDactive
data$SDactive = as.vector(apply(activeNDVI,1,sd,na.rm=TRUE))
data =  as.data.frame(t(rbind(activeMeans,inactiveMeans)))
data$SDactive = as.vector(apply(activeNDVI,2,sd,na.rm=TRUE))
data$SDinactive = as.vector(apply(inactiveNDVI,2,sd,na.rm=TRUE))
data$DOY = seq(001,353,16)
data
active_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)+
geom_line(aes(x=DOY,y=(active+SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
geom_line(aes(x=DOY,y=(active-SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/active_pixels.png",1800,900)
active_pixels
dev.off()
inactive_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=inactive/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactive+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactive-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/inactive_pixels.png",1800,900)
inactive_pixels
dev.off()
data$DOY
active_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)+
geom_line(aes(x=DOY,y=(active+SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
geom_line(aes(x=DOY,y=(active-SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
active_pixels
ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)+
geom_line(aes(x=DOY,y=(active+SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
geom_line(aes(x=DOY,y=(active-SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
data
ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)
data
ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)
rm(active)
active_pixels
rm(inactive)
inactive_pixels
rm(inactive_pixels)
rm(active_pixels)
rm(map2016)
rm(NDVI)
ggplot(data=data)+
geom_line(aes(x=DOY,y=active/10000,group=1),color="olivedrab3",size=1.4)
data
active_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=activeMeans/10000,group=1),color="olivedrab3",size=1.4)+
geom_line(aes(x=DOY,y=(activeMeans+SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
geom_line(aes(x=DOY,y=(activeMeans-SDactive)/10000,group=1),linetype=2,color="olivedrab3",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/active_pixels.png",1800,900)
active_pixels
dev.off()
active_pixels
inactive_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/inactive_pixels.png",1800,900)
inactive_pixels
dev.off()
inactive_pixels
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
data
inactive_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/inactive_pixels.png",1800,900)
inactive_pixels
dev.off()
getwd()
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
data
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)
inactive_pixels = ggplot(data=data)+
geom_line(aes(x=DOY,y=inactiveMeans/10000,group=1),color="indianred4",size=1.4)+
geom_line(aes(x=DOY,y=(inactiveMeans+SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
geom_line(aes(x=DOY,y=(inactiveMeans-SDactive)/10000,group=1),linetype=2,color="indianred4",size=1.5)+
labs(y="NDVI value",x="Day of the year 2016")+
theme_minimal(base_size = 18)+
ylim(0,1)
png("../results/plots/inactive_pixels2.png",1800,900)
inactive_pixels
dev.off()
