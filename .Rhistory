conc(c2)
conc(c2i)
tub = 0
inflow = 10 # in liters per minute
outflow = 0.5 * tub
for (i in 1:10){
tub = tub + inflow
outflow = 0.5*tub
tub = tub - outflow
print(paste0("The water in the tub after minute ",i," is ",tub))
}
f = function(x){-0.5x + 10x}
f = function(x){-0.5*x + 10*x}
integrate(f,lower = 0,upper = 10)
f = function(x){10*x-0.5x}
f = function(x){10*x-0.5*x}
integrate(f,lower = 0,upper = 10)
integrate(f,lower = 0,upper = 1)
integrate(f,lower = 0,upper = 10)
f
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))
?ggplot
length(mpg$hwy)
unique(mpg$displ)
liters = unique(mpg$displ)
average = c()
for (i in liters){
m = mean(mpg$hwy[mpg$displ==i])
append(average,m)
}
for (i in 1:length(liters)){
average[i] = mean(mpg$hwy[mpg$displ==liters[i]])
}
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=average)
displAv = data.frame(displ=liters,hwy=average)
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=hwy))
mod = lm(hwy~displ, data=displAv)
mod
min(liters)
x = seq(0,7,0.5)
y = predict(mod,x)
f = function(x){-2.849*x+33.855}
y = lapply(x,f)
y
y = unlist(lapply(x,f))
y
x = seq(0,7,0.25)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.2)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.1)
x = seq(0,7,0.21)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.22)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
x = seq(0,7,0.23)
x = seq(0,7,0.19)
x = seq(0,7,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,7,0.198)
x = seq(0,7,0.195)
x = seq(0,7,0.194)
x = seq(0,8,0.2)
f = function(x){-2.849*x+33.855}
x = seq(0,8,0.25)
x = seq(0,8,0.225)
x = seq(0,8,0.22)
x = seq(0,8,0.21)
x = seq(0,8,0.23)
f = function(x){-2.849*x+33.855}
y = unlist(lapply(x,f))
y
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
y = unlist(lapply(displAv$displ,f))
displAv$lin = y
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy))+
geom_line(data=displAv, mapping=aes(x=displ,y=lin))
mod
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))+
ggplot(data=mpg)+
geom_point(mapping = aes(x=cyl, y=hwy))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, size=cyl))
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=cyl))
mpg
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color=class, alpha=year, shape=fl))
devtools::install_github("rstudio/keras")
library(keras)
_install_keras()
?install_keras()
library(rgdal)
# script to achieve an automated stratified random sampling
library(rgdal)
library(gdalUtils)
library(rgeos)
library(mapview)
library(sp)
library(maptools)
fields = readOGR("F:/R/results/shapes/agri_area_single.shp")
fields$id = 1:length(fields)
provinces = readOGR("F:/R/results/shapes/adm_1_2_balchasch_alakol.shp")
provinces = provinces[is.na(provinces$HASC_1),]
provinces@data = provinces@data[,c(2,5,14)]
provinces@data$NAME_1 = as.character(provinces@data$NAME_1)
provinces@data$NAME_2 = as.character(provinces@data$NAME_2)
centroids = gCentroid(fields, byid = TRUE)
contained = gContains(provinces,centroids, byid = TRUE)
index = apply(contained,1,function(x){
return(which(x == TRUE))
})
index = as.vector(unlist(index))
provNames = provinces@data$NAME_2
fields$province = provNames[index]
fields$area = gArea(fields,byid = TRUE)
df = data.frame(prov = provNames,area=0, perc = 0,pixels=0)
for(province in provNames){
df$area[df$prov==province] = sum(fields$area[fields$province==province])
}
df$perc = df$area / sum(df$area)
df$pixels = round(2000 * df$perc)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 750)
mapview(buffer)
r = raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
r = raster::raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
fields$area = gArea(fields,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution)
mapview(buffer)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*6)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
touch = gIntersects(buffer)
touch = gIntersects(buffer, byid = TRUE)
touch
?gIntersects
notouch = gDisjoint(buffer, byid = TRUE)
notouch
rm(touch)
unique(touch)
unique(notouch)
summary(notouvh)
summary(notouch)
dim(notouch)
notuch[1,1]
notouch[1,1]
index = apply(notouch,1,function(x){
return(sum(x))
})
index
index = as.vector(unlist(index))
index
unique(index)
index = apply(notouch,1,function(x){
return(sum(x))
})
sum(notouch[1,])
sum(notouch[,1])
notouch[1,]
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
which(index==2047)
plot(randomPoints[c(33,34)])
plot(randomPoints[c(33,34),])
mapview(randomPoints[c(33,34),])
mapview(randomPoints[c(62,71),])
randomPoints
which(index==2047)
which(index==2047)[seq(1,which(index==2047),2)]
which(index==2047)[seq(1,length(which(index==2047)),2)]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints = randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
unique(index)
gDisjoint()
?gDisjoint()
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
index = which(index==2047
index
index = which(index==2047)
index
notouch[index,]
which(!notouch)
which(notouch)
which(!notouch)
dim(which(!notouch))
index = apply(notouch,1,function(x){
return(which(x == FALSE))
})
index
index = as.vector(unlist(index))
index
randomPoints
index = apply(notouch,1,function(x){
if (sum(x)==0)return(0)
if (sum(x)>0)return(which(x)==FALSE)
})
index
notouch = gIntersect(buffer, byid = TRUE)
touch = gIntersects(buffer, byid = TRUE)
sum(touch[1,])
sum(touch[2,])
sum(touch[3,])
as.vector(touch[3,])
as.vector(touch[1,])
sum(touch[2,])
sum(touch[4,])
sum(touch[5,])
sum(touch[500,])
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x)==TRUE)
})
index
index = as.vector(unlist(index))
index
which(index!=0)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
which(index!=0)
index
?spsample
df$pixels = round(2500 * df$perc)
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
touch = gIntersects(buffer, byid = TRUE)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
index
index = which(index!=0)
index
randomPoints = randomPoints[-index,]
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(tmp)))
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(randomPoints)))
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(random, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(randomPoints, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
df
write.csv(df,"B:/ibb/results/randomSample.csv")
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
install.packages("rater")
install.packages("raster")
library(raster)
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
?merge
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
?merge
t = merge(first2016,second2016)
t = mosaic(first2016,second2016)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
second2016
plot(second2016[1],type = "l")
plot(as.numeric(second2016[1]),type = "l")
library(raster)
library(rgdal)
setwd("B:/ibb/AgriIBB/")
regions = readOGR("../results/shapes/regions.shp")
prec = lapply(list.files("../results/clean/", pattern="prec", full.names=TRUE),stack)
prec = lapply(list.files("../results/clean/", pattern="prec", full.names=TRUE),raster)
list.files("../results/clean/", pattern="prec", full.names=TRUE)
prec = lapply(list.files("../results/climate/", pattern="prec", full.names=TRUE),stack)
list.files("../results/climate/", pattern="prec", full.names=TRUE)
prec = lapply(list.files("../results/climate/", pattern="prec", full.names=TRUE),stack)
prec
prec = stack(list.files("../results/climate/", pattern="prec", full.names=TRUE)
prec = stack(list.files("../results/climate/", pattern="prec", full.names=TRUE))
temp = stack(list.files("../results/climate/", pattern="tmp", full.names=TRUE))
prec
names = regions$NAME_1
names
names = regions$NAME_2
names
regions$ISO
names
years=2003:2016
paste("temp",years,collapse="")
paste("temp",years,sep="")
regions@data[,paste("temp",years,sep="")] = 0
names(regions@data)
regions@data
regions@data[,paste("temp",years,sep="")] = NA
regions@data[,paste("prec",years,sep="")] = NA
length(regions)
i = 5
plot(regions[5,])
plot(regions[6,])
plot(regions[7,])
regions@data
plot(regions[3,])
plot(regions[2,])
plot(regions[1,])
plot(regions[4,])
i = 4
t = extract(temp,regions[i,])
t
t = mean(extract(temp,regions[i,]))
t
t = mean(extract(temp,regions[i,])[[1]])
t
?mean
t = colMeans(extract(temp,regions[i,])[[1]])
t
plot(as.numeric(t),type = "l")
p = colSums(extract(prec,regions)[[1]])
p = colSums(extract(prec,regions[i,])[[1]])
plot(as.numeric(p),type = "l")
# for the calculation of the areas, the shapefile is transformed to UTM Zone 44
# the majority of the IBB with agricultural areas lies within that zone
# later the shapefile is re-projected to WGS84
orgCRS = crs(regions)
orgCRS
regions = readOGR("../results/shapes/regions.shp")
regions = spTransform(regions,utmCRS)
utmCRS = "+proj=utm +zone=44 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
regions = spTransform(regions,utmCRS)
library(rgeos)
regions$area = gArea(regions,byid = TRUE)
regions$area
regions$area = gArea(regions,byid = TRUE) / 1e+6 # units in km2
1e+6
regions$area
sum(regions$area)
regions= spTransform(regions,orgCRS)
t = colMeans(extract(temp,regions[i,])[[1]])
p = colSums(extract(prec,regions[i,])[[1]])
t
p
# loop through the regions to retireve mean temperature values and sum percipitation per area
years=2003:2016
regions@data[,paste("temp",years,sep="")] = NA
regions@data[,paste("prec",years,sep="")] = NA
regions@data[i,paste("temp",years,sep="")]
p / regions$area[i]
p
prec
t
prec
p = colMeans(extract(prec,regions[i,])[[1]])
p
p / regions$area[i]
plot(p,type="l")
plot(p/regions$area,type = "l")
p/regions$area
length(p)
p/regions$area[4]
i
p/regions$area[4]
plot(p/regions$area[4],type = "l")
plot(p,type = "l")
for (i in 1:length(regions)){
t = colMeans(extract(temp,regions[i,])[[1]])
p = colMeans(extract(prec,regions[i,])[[1]])
regions@data[i,paste("temp",years,sep="")] = t
regions@data[i,paste("prec",years,sep="")] = p
}
regions@data
mapview::mapview(regions[24,])
watershed = readOGR("../results/shapes/watershed_IBB.shp")
mapview::mapview(watershed)
# cleaning the regions shapefile
# there are some provinces that
gIntersects(watershed,regions,byid=TRUE)
# cleaning the regions shapefile
# there are some provinces that
gIntersection(watershed,regions,byid=TRUE)
?gIntersects
# cleaning the regions shapefile
# there are some provinces that
gContains(watershed,regions,byid=TRUE)
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[gContains(watershed,regions,byid=TRUE),]
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[gContains(watershed,regions,byid=TRUE),])
gContains(watershed,regions,byid=TRUE))
as.vector(gContains(watershed,regions,byid=TRUE))
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gContains(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gContainsProperly(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gCovers(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gWithin(watershed,regions,byid=TRUE)),])
gWithin(watershed,regions,byid=TRUE)
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gCrosses(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gCon(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gContains(watershed,regions,byid=TRUE)),])
# cleaning the regions shapefile
# there are some provinces that
mapview::mapview(regions[as.vector(gIntersects(watershed,regions,byid=TRUE)),])
regions@data
mapview::mapview(regions[24,])
mapview::mapview(regions[25,])
regions[24,]
region@datas[24,]
regions@data[24,]
regions@data[25,]
writeOGR(regions,dsn="../results/shapes/regions.shp",overwrite_layer=TRUE,driver="ESRI Shapefile")
writeOGR(regions,dsn="../results/shapes/regions.shp",overwrite_layer=TRUE,driver="ESRI Shapefile",layer="regions")
writeOGR(regions,dsn="../results/shapes/regions.shp",overwrite_layer=TRUE,driver="ESRI Shapefile",layer="regions")
View(watershed)
